import type { CheckExistResult, DigestResult, DigestResultWithEthscription, EnumAllDetailed, EsimtateCostOptions, EstimateCostResult, EthscriptionBase, ResolveUserResult, Result, ResultDetailed, UserProfileResult } from "./types.ts";
export { BASE_API_URL, CACHE_TTL } from "./constants.ts";
export declare function checkExists(sha: string, options?: any): Promise<Result<CheckExistResult>>;
export declare function resolveUser(val: string, options?: any): Promise<Result<ResolveUserResult>>;
export declare function getUserProfile(val: string, options?: any): Promise<Result<UserProfileResult>>;
export declare function getDigestForData(input: `data:${string}` | `0x${string}` | Uint8Array | string, options?: any): Promise<Result<DigestResult | DigestResultWithEthscription>>;
export declare function getUserCreatedEthscritions(val: string, options?: any): Promise<Result<EthscriptionBase[]>>;
export declare function getUserOwnedEthscriptions(val: string, options?: any): Promise<Result<EthscriptionBase[]>>;
export declare function getAllEthscriptions(options: any): Promise<Result<EthscriptionBase[]>>;
export declare function getEthscriptionById(id: string, options?: any): Promise<Result<EthscriptionBase>>;
export declare function getEthscriptionDetailed<T extends EnumAllDetailed>(id: string, type: T, options?: any): Promise<ResultDetailed<T>>;
export declare function estimateDataCost(input: `data:${string}` | `0x${string}` | Uint8Array | string, options?: EsimtateCostOptions): Promise<Result<EstimateCostResult>>;
